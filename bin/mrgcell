#!/bin/bash
#
# Merge two CSV files on "mcc", "mnc", "lac", and "cid"
#
# Input dependencies:
#   Columns "mcc", "mnc", "lac", and "cid" (in 'file_1' and 'file_2')
#
# Uses: R
#
# Daniel Weibel <daniel.weibel@unifr.ch> Mar. 2015
#------------------------------------------------------------------------------#

set -e

usage() {
cat <<EOF
Usage:
 ${0##*/} -f file_2 [-c cols] [-o file_out] [file_1]

Description:
 Merge 'file_1' with 'file_2' on columns "mcc", "mnc", "lac", and "cid". Keep
 all rows of 'file_1' (left outer join). If a row of 'file_1' has multiple
 matches in 'file_2', there will be one line for each match in the result.

Options:
 -f File to merge into 'file_1'
 -c Columns of 'file_2' to include, comma separated, no spaces

Example:
 Merging CellIdsService file with locations from OpenCellID file:
   ${0##*/} -f ocid.csv -c lat,lon cidservice.csv
EOF
}
[[ "$1" = --help ]] && usage && exit

# Source common functions
dir() { local w=$(which ${0##*/}); dirname "${w:-$0}"; }
source "$(dir)/../lib/commons.sh"

while getopts ":f:c:o:" opt; do
  case $opt in
    f) f=$OPTARG ;;
    c) c=$OPTARG ;;
    o) o=$OPTARG ;;
    \?) Abort "invalid option: -$OPTARG"             ;;
    :)  Abort "option -$OPTARG requires an argument" ;;
  esac
done
shift $(($OPTIND - 1))

IsUnset "$f" && Abort "must set -f (file_2)"

[[ -n "$1" ]] && input="$1"
[[ -z "$1" ]] && input=$(TmpFile) && cat - >"$input"
CheckInput "$input"

r=$(TmpFile); rout=$(TmpFile)
cat <<EOF >"$r"
df1 <- ReadCSV("$input")
df2 <- ReadCSV("$f")
cols <- strsplit("$c", ",")[[1]]
WriteCSV(MergeCells(df1, df2, cols), "$rout")
EOF

MyRscript "$r"
IsUnset "$o" && cat "$rout"
IsSet   "$o" && cat "$rout" >"$o"
